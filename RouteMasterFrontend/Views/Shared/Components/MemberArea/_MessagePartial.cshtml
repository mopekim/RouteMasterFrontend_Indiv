<link href="~/css/kimstyle.css" rel="stylesheet" />

<div id="app">
    <div class="container">
        <div class="row row-cols-md-auto ms-1">
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio1" v-model="filter" value="1" @@change="getMessage">
                <label class="form-check-label" for="radio1">
                    未讀
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio2" v-model="filter" value="2" @@change="getMessage">
                <label class="form-check-label" for="radio2">
                    已讀
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="flexRadioDefault" id="radio3" v-model="filter" value="3" @@change="getMessage">
                <label class="form-check-label" for="radio3">
                    全部
                </label>
            </div>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="readall" @@change="allRead" :disabled="completeRead">
                <label class="form-check-label" for="readall">全部已讀</label>
            </div>
            <button type="button" class="btn btn-primary btn-sm rounded-pill">轉未讀</button>

        </div>
        <div class="row mt-1 g-2">
            <div class="col-6" v-for="(item,index) in indexVM" :key="item.id">
                <div class="d-flex flex-column h-100">
                    <div class="card mb-3 flex-grow-1 cardLine">
                        <h5 class="card-header">{{item.category}}</h5>
                        <div class="card-body">
                            <p class="card-text">{{item.id}}</p>
                            <h5 class="card-title">{{item.content}}</h5>
                            <p class="card-text dis">{{item.isRead}}</p>
                            <div class="form-check form-switch form-check-inline">
                                <input class="form-check-input" type="checkbox" role="switch" :id='"switchStatus" + item.id' :checked="item.isRead" @@change="updateSW(item.id, item.isRead)">
                                <label class="form-check-label" :for='"switchStatus" + item.id'>{{item.isRead? "已讀":"未讀"}}</label>
                                <template v-if="item.category=='檢舉'">
                                    <button type="button" class="btn btn-warning btn-sm ms-3 fs-6" @@click="searchSite(item.id)">前往評論區</button>
                                </template>
                                <template v-else>
                                    <a class="btn btn-warning btn-sm ms-3 fs-6" href="https://localhost:7145/Accommodations/Index" role="button">前往評論區</a>
                                </template>                                
                            </div>
                            @*<div v-if="item.isRead" class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" value="" :id='"restore"+ item.id' @@change="restoreStatus(item.id)">
                                <label class="form-check-label" :for='"restore"+ item.id' :id='"lb"+ item.id'>回復未讀狀態</label>
                            </div>*@
                        </div>
                    </div>
                </div>
                
                
            </div>
        </div>

    </div>

</div>


    <script src="https://unpkg.com/vue@3.2.36/dist/vue.global.js"></script>
    <script src="https://kit.fontawesome.com/ad2e9fef09.js" crossorigin="anonymous"></script>
    <script>

        const vueApp = {
            data() {
                return {
                    indexVM: [],
                    filter: 1,
                    completeRead: false,
                    //restoreList:[],
                }
            },
            mounted: function () {
            let _this = this;
            _this.getMessage();

            },
            methods: {
            //restoreStatus:function(msgId){
            //    let _this = this;
            //    const ck = document.getElementById("restore" + msgId);
            //    const isChosen = ck.checked;
            //    const lb= document.getElementById("lb" + msgId);
            //    if(isChosen){
            //        _this.restoreList.push(msgId);
            //        lb.textContent="已勾選";
            //        console.log(_this.restoreList.length);
            //    }

            //},
                allRead: function () {
                    let _this = this;
                    const one = document.getElementById("readall");
                    const isLaunched = one.checked;
                    if (isLaunched) {
                        fetch("https://localhost:7145/SystemMessage/MarkAllAsRead", {
                            method: "POST",
                        }).then(response => response.text())
                            .then(result => {

                                console.log(result);
                                _this.completeRead = true;
                                _this.getMessage();
                            }
                            ).catch(error => {
                                console.error('There was a problem with the fetch operation:', error);
                            });

                    }
                },
                updateSW: function (msgId, isRead) {
                    let _this = this;
                    console.log(msgId);
                    const sw = document.getElementById("switchStatus" + msgId);
                    const isChecked = sw.checked;


                    if (isChecked !== isRead ) {
                        console.log("該發送ajax");
                        var uri = `https://localhost:7145/SystemMessage/UpdateNoticeStatus?id=${msgId}`;
                        fetch(uri, {
                            method: "POST",
                        }).then(response => response.text())
                            .then(result => {

                                console.log(result);
                                _this.getMessage();
                            }
                            ).catch(error => {
                                console.error('There was a problem with the fetch operation:', error);
                            });

                    }
                    else {
                    console.log("沒事");
                    }

                },

            getMessage: function () {
                let _this = this;
                var uri = `https://localhost:7145/SystemMessage/Index?filter=${_this.filter}`;
                fetch(uri, {
                    method: "POST",
                }).then(response => response.json())
                    .then(result => {
                        _this.indexVM = result;
                        console.log(_this.indexVM);
                    }
                    ).catch(error => {
                        console.error('There was a problem with the fetch operation:', error);
                    });
            },

                searchSite: function (id) {
                    var uri = `https://localhost:7145/SystemMessage/GetUrl?msgId=${id}`;
                    fetch(uri, {
                        method: "POST",
                    }).then(response => response.text())
                        .then(result => {
                            var url = result;
                            window.location.href = url + "#commentArea";

                        })
                },

            }
        }
        var app = Vue.createApp(vueApp).mount("#app");
    </script>
