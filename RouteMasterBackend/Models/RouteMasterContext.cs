// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RouteMasterBackend.Models
{
    public partial class RouteMasterContext : DbContext
    {
        public RouteMasterContext()
        {
        }

        public RouteMasterContext(DbContextOptions<RouteMasterContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Accommodation> Accommodations { get; set; }
        public virtual DbSet<AccommodationImage> AccommodationImages { get; set; }
        public virtual DbSet<AccommodationServiceInfo> AccommodationServiceInfos { get; set; }
        public virtual DbSet<AcommodationCategory> AcommodationCategories { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityCategory> ActivityCategories { get; set; }
        public virtual DbSet<ActivityImage> ActivityImages { get; set; }
        public virtual DbSet<ActivityProduct> ActivityProducts { get; set; }
        public virtual DbSet<Administrator> Administrators { get; set; }
        public virtual DbSet<Attraction> Attractions { get; set; }
        public virtual DbSet<AttractionCategory> AttractionCategories { get; set; }
        public virtual DbSet<AttractionClick> AttractionClicks { get; set; }
        public virtual DbSet<AttractionImage> AttractionImages { get; set; }
        public virtual DbSet<AttractionTag> AttractionTags { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<CartAccommodationDetail> CartAccommodationDetails { get; set; }
        public virtual DbSet<CartActivitiesDetail> CartActivitiesDetails { get; set; }
        public virtual DbSet<CartExtraServicesDetail> CartExtraServicesDetails { get; set; }
        public virtual DbSet<CommentAccommodationLike> CommentAccommodationLikes { get; set; }
        public virtual DbSet<CommentStatus> CommentStatuses { get; set; }
        public virtual DbSet<CommentsAccommodation> CommentsAccommodations { get; set; }
        public virtual DbSet<CommentsAccommodationImage> CommentsAccommodationImages { get; set; }
        public virtual DbSet<CommentsAttraction> CommentsAttractions { get; set; }
        public virtual DbSet<CommentsAttractionImage> CommentsAttractionImages { get; set; }
        public virtual DbSet<Coupon> Coupons { get; set; }
        public virtual DbSet<ExtraService> ExtraServices { get; set; }
        public virtual DbSet<ExtraServiceImage> ExtraServiceImages { get; set; }
        public virtual DbSet<ExtraServiceProduct> ExtraServiceProducts { get; set; }
        public virtual DbSet<Faq> Faqs { get; set; }
        public virtual DbSet<Faqcategory> Faqcategories { get; set; }
        public virtual DbSet<FavoriteAttraction> FavoriteAttractions { get; set; }
        public virtual DbSet<Member> Members { get; set; }
        public virtual DbSet<MemberImage> MemberImages { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderAccommodationDetail> OrderAccommodationDetails { get; set; }
        public virtual DbSet<OrderActivitiesDetail> OrderActivitiesDetails { get; set; }
        public virtual DbSet<OrderExtraServicesDetail> OrderExtraServicesDetails { get; set; }
        public virtual DbSet<OrderHandleStatus> OrderHandleStatuses { get; set; }
        public virtual DbSet<PackageCoupon> PackageCoupons { get; set; }
        public virtual DbSet<PackageTour> PackageTours { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<ReportReason> ReportReasons { get; set; }
        public virtual DbSet<ReportedAttractionComment> ReportedAttractionComments { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomImage> RoomImages { get; set; }
        public virtual DbSet<RoomProduct> RoomProducts { get; set; }
        public virtual DbSet<RoomServiceInfo> RoomServiceInfos { get; set; }
        public virtual DbSet<RoomType> RoomTypes { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<ServiceInfoCategory> ServiceInfoCategories { get; set; }
        public virtual DbSet<SystemImage> SystemImages { get; set; }
        public virtual DbSet<SystemMessage> SystemMessages { get; set; }
        public virtual DbSet<Town> Towns { get; set; }
        public virtual DbSet<Transportation> Transportations { get; set; }
        public virtual DbSet<TravelPlan> TravelPlans { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Accommodation>(entity =>
            {
                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.IndustryEmail).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.PhoneNumber).HasMaxLength(20);

                entity.Property(e => e.Website).HasMaxLength(2000);

                entity.HasOne(d => d.AcommodationCategory)
                    .WithMany(p => p.Accommodations)
                    .HasForeignKey(d => d.AcommodationCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Accommoda__Acomm__3493CFA7");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Accommodations)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Accommoda__Partn__3587F3E0");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Accommodations)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Accommoda__Regio__367C1819");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.Accommodations)
                    .HasForeignKey(d => d.TownId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Accommoda__TownI__37703C52");

                entity.HasMany(d => d.AccommodationServiceInfos)
                    .WithMany(p => p.Accommodations)
                    .UsingEntity<Dictionary<string, object>>(
                        "AccommodationServiceInfosAccommodation",
                        l => l.HasOne<AccommodationServiceInfo>().WithMany().HasForeignKey("AccommodationServiceInfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__ServiceIn__Accom__0F2D40CE"),
                        r => r.HasOne<Accommodation>().WithMany().HasForeignKey("AccommodationId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Accommoda__Accom__395884C4"),
                        j =>
                        {
                            j.HasKey("AccommodationId", "AccommodationServiceInfoId").HasName("PK__Accommod__DE629F1B6B6BE9BB");

                            j.ToTable("AccommodationServiceInfos_Accommodations");
                        });
            });

            modelBuilder.Entity<AccommodationImage>(entity =>
            {
                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Accommodation)
                    .WithMany(p => p.AccommodationImages)
                    .HasForeignKey(d => d.AccommodationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Accommoda__Accom__339FAB6E");
            });

            modelBuilder.Entity<AccommodationServiceInfo>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.ServiceInfoCategory)
                    .WithMany(p => p.AccommodationServiceInfos)
                    .HasForeignKey(d => d.ServiceInfoCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AccommodationServiceInfos_ServiceInfoCategories");
            });

            modelBuilder.Entity<AcommodationCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Activity>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.ActivityCategory)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.ActivityCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__Activ__3B40CD36");

                entity.HasOne(d => d.Attraction)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.AttractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__Attra__3C34F16F");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__Regio__3D2915A8");
            });

            modelBuilder.Entity<ActivityCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ActivityImage>(entity =>
            {
                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ActivityImages)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ActivityI__Activ__3E1D39E1");
            });

            modelBuilder.Entity<ActivityProduct>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("date");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.ActivityProducts)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ActivityP__Activ__3F115E1A");
            });

            modelBuilder.Entity<Administrator>(entity =>
            {
                entity.HasIndex(e => e.Email, "UQ__Administ__A9D1053491A28778")
                    .IsUnique();

                entity.Property(e => e.ConfirmCode).HasMaxLength(300);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.Administrators)
                    .HasForeignKey(d => d.PermissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Administr__Permi__40058253");
            });

            modelBuilder.Entity<Attraction>(entity =>
            {
                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Website).HasMaxLength(2000);

                entity.HasOne(d => d.AttractionCategory)
                    .WithMany(p => p.Attractions)
                    .HasForeignKey(d => d.AttractionCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Attractio__Attra__42E1EEFE");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Attractions)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Attractio__Regio__43D61337");

                entity.HasOne(d => d.Town)
                    .WithMany(p => p.Attractions)
                    .HasForeignKey(d => d.TownId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Attractio__TownI__44CA3770");

                entity.HasMany(d => d.Tags)
                    .WithMany(p => p.Attractions)
                    .UsingEntity<Dictionary<string, object>>(
                        "TagsAttraction",
                        l => l.HasOne<AttractionTag>().WithMany().HasForeignKey("TagId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Tags_Attr__TagId__02C769E9"),
                        r => r.HasOne<Attraction>().WithMany().HasForeignKey("AttractionId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Tags_Attr__Attra__01D345B0"),
                        j =>
                        {
                            j.HasKey("AttractionId", "TagId").HasName("PK__Tags_Att__0CB582C0A6BB6766");

                            j.ToTable("Tags_Attractions");
                        });
            });

            modelBuilder.Entity<AttractionCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<AttractionClick>(entity =>
            {
                entity.ToTable("AttractionClick");

                entity.Property(e => e.ClickDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Attraction)
                    .WithMany(p => p.AttractionClicks)
                    .HasForeignKey(d => d.AttractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Attractio__Attra__40F9A68C");
            });

            modelBuilder.Entity<AttractionImage>(entity =>
            {
                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Attraction)
                    .WithMany(p => p.AttractionImages)
                    .HasForeignKey(d => d.AttractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Attractio__Attra__41EDCAC5");
            });

            modelBuilder.Entity<AttractionTag>(entity =>
            {
                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Cart>(entity =>
            {
                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Carts)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Carts__MemberId__4B7734FF");
            });

            modelBuilder.Entity<CartAccommodationDetail>(entity =>
            {
                entity.ToTable("Cart_AccommodationDetails");

                entity.HasOne(d => d.Cart)
                    .WithMany(p => p.CartAccommodationDetails)
                    .HasForeignKey(d => d.CartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Cart_Acco__CartI__45BE5BA9");

                entity.HasOne(d => d.RoomProduct)
                    .WithMany(p => p.CartAccommodationDetails)
                    .HasForeignKey(d => d.RoomProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Cart_Acco__RoomP__46B27FE2");
            });

            modelBuilder.Entity<CartActivitiesDetail>(entity =>
            {
                entity.ToTable("Cart_ActivitiesDetails");

                entity.HasOne(d => d.ActivityProduct)
                    .WithMany(p => p.CartActivitiesDetails)
                    .HasForeignKey(d => d.ActivityProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Cart_Acti__Activ__47A6A41B");

                entity.HasOne(d => d.Cart)
                    .WithMany(p => p.CartActivitiesDetails)
                    .HasForeignKey(d => d.CartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Cart_Acti__CartI__489AC854");
            });

            modelBuilder.Entity<CartExtraServicesDetail>(entity =>
            {
                entity.ToTable("Cart_ExtraServicesDetails");

                entity.HasOne(d => d.Cart)
                    .WithMany(p => p.CartExtraServicesDetails)
                    .HasForeignKey(d => d.CartId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Cart_Extr__CartI__498EEC8D");

                entity.HasOne(d => d.ExtraServiceProduct)
                    .WithMany(p => p.CartExtraServicesDetails)
                    .HasForeignKey(d => d.ExtraServiceProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Cart_Extr__Extra__4A8310C6");
            });

            modelBuilder.Entity<CommentAccommodationLike>(entity =>
            {
                entity.ToTable("Comment_Accommodation_Likes");

                entity.Property(e => e.CommentsAccommodationId).HasColumnName("Comments_AccommodationId");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.CommentsAccommodation)
                    .WithMany(p => p.CommentAccommodationLikes)
                    .HasForeignKey(d => d.CommentsAccommodationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comment_A__Comme__4C6B5938");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.CommentAccommodationLikes)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comment_A__Membe__4D5F7D71");
            });

            modelBuilder.Entity<CommentStatus>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CommentsAccommodation>(entity =>
            {
                entity.ToTable("Comments_Accommodations");

                entity.Property(e => e.Cons).HasMaxLength(2000);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Pros).HasMaxLength(2000);

                entity.Property(e => e.Reply).HasMaxLength(2000);

                entity.Property(e => e.ReplyAt).HasColumnType("datetime");

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.HasOne(d => d.Accommodation)
                    .WithMany(p => p.CommentsAccommodations)
                    .HasForeignKey(d => d.AccommodationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comments___Accom__4F47C5E3");

                entity.HasOne(d => d.CommentStatus)
                    .WithMany(p => p.CommentsAccommodations)
                    .HasForeignKey(d => d.CommentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comments___Comme__503BEA1C");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.CommentsAccommodations)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comments___Membe__51300E55");
            });

            modelBuilder.Entity<CommentsAccommodationImage>(entity =>
            {
                entity.ToTable("Comments_AccommodationImages");

                entity.Property(e => e.CommentsAccommodationId).HasColumnName("Comments_AccommodationId");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.CommentsAccommodation)
                    .WithMany(p => p.CommentsAccommodationImages)
                    .HasForeignKey(d => d.CommentsAccommodationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comments___Comme__4E53A1AA");
            });

            modelBuilder.Entity<CommentsAttraction>(entity =>
            {
                entity.ToTable("Comments_Attractions");

                entity.Property(e => e.Content).HasMaxLength(2000);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Attraction)
                    .WithMany(p => p.CommentsAttractions)
                    .HasForeignKey(d => d.AttractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comments___Attra__531856C7");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.CommentsAttractions)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comments___Membe__540C7B00");
            });

            modelBuilder.Entity<CommentsAttractionImage>(entity =>
            {
                entity.ToTable("Comments_AttractionImages");

                entity.Property(e => e.CommentsAttractionId).HasColumnName("Comments_AttractionId");

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.CommentsAttraction)
                    .WithMany(p => p.CommentsAttractionImages)
                    .HasForeignKey(d => d.CommentsAttractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Comments___Comme__5224328E");
            });

            modelBuilder.Entity<Coupon>(entity =>
            {
                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<ExtraService>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Attraction)
                    .WithMany(p => p.ExtraServices)
                    .HasForeignKey(d => d.AttractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ExtraServ__Attra__56E8E7AB");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.ExtraServices)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ExtraServ__Regio__57DD0BE4");
            });

            modelBuilder.Entity<ExtraServiceImage>(entity =>
            {
                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.ExtraService)
                    .WithMany(p => p.ExtraServiceImages)
                    .HasForeignKey(d => d.ExtraServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ExtraServ__Extra__55009F39");
            });

            modelBuilder.Entity<ExtraServiceProduct>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("date");

                entity.HasOne(d => d.ExtraService)
                    .WithMany(p => p.ExtraServiceProducts)
                    .HasForeignKey(d => d.ExtraServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ExtraServ__Extra__55F4C372");
            });

            modelBuilder.Entity<Faq>(entity =>
            {
                entity.ToTable("FAQs");

                entity.Property(e => e.Answer)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FaqcategoryId).HasColumnName("FAQCategoryId");

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.HasOne(d => d.Faqcategory)
                    .WithMany(p => p.Faqs)
                    .HasForeignKey(d => d.FaqcategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FAQs__FAQCategor__58D1301D");
            });

            modelBuilder.Entity<Faqcategory>(entity =>
            {
                entity.ToTable("FAQCategories");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<FavoriteAttraction>(entity =>
            {
                entity.HasOne(d => d.Attraction)
                    .WithMany(p => p.FavoriteAttractions)
                    .HasForeignKey(d => d.AttractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FavoriteA__Attra__59C55456");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.FavoriteAttractions)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FavoriteA__Membe__5AB9788F");
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.HasIndex(e => e.Email, "UQ__Members__A9D10534F57FED95")
                    .IsUnique();

                entity.HasIndex(e => e.Account, "UQ__Members__B0C3AC465D8E8340")
                    .IsUnique();

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.CellPhoneNumber).HasMaxLength(10);

                entity.Property(e => e.ConfirmCode).HasMaxLength(300);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EncryptedPassword).HasMaxLength(255);

                entity.Property(e => e.FaceBookAccessCode).HasMaxLength(300);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GoogleAccessCode).HasMaxLength(300);

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LineAccessCode).HasMaxLength(300);

                entity.Property(e => e.LoginTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<MemberImage>(entity =>
            {
                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MemberImages)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MemberIma__Membe__5BAD9CC8");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Coupons)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.CouponsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Orders__CouponsI__65370702");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Orders__MemberId__662B2B3B");

                entity.HasOne(d => d.OrderHandleStatus)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.OrderHandleStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Orders__OrderHan__671F4F74");

                entity.HasOne(d => d.PaymentMethod)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.PaymentMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Orders__PaymentM__681373AD");

                entity.HasOne(d => d.PaymentStatus)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.PaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Orders__PaymentS__690797E6");
            });

            modelBuilder.Entity<OrderAccommodationDetail>(entity =>
            {
                entity.Property(e => e.AccommodationName).HasMaxLength(50);

                entity.Property(e => e.CheckIn).HasColumnType("datetime");

                entity.Property(e => e.CheckOut).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(2000);

                entity.Property(e => e.RoomName).HasMaxLength(50);

                entity.Property(e => e.RoomType).HasMaxLength(50);

                entity.HasOne(d => d.Accommodation)
                    .WithMany(p => p.OrderAccommodationDetails)
                    .HasForeignKey(d => d.AccommodationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderAcco__Accom__5CA1C101");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderAccommodationDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderAcco__Order__5D95E53A");

                entity.HasOne(d => d.RoomProduct)
                    .WithMany(p => p.OrderAccommodationDetails)
                    .HasForeignKey(d => d.RoomProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderAcco__RoomP__5E8A0973");
            });

            modelBuilder.Entity<OrderActivitiesDetail>(entity =>
            {
                entity.Property(e => e.ActivityName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Date).HasColumnType("date");

                entity.HasOne(d => d.Activity)
                    .WithMany(p => p.OrderActivitiesDetails)
                    .HasForeignKey(d => d.ActivityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderActi__Activ__5F7E2DAC");

                entity.HasOne(d => d.ActivityProduct)
                    .WithMany(p => p.OrderActivitiesDetails)
                    .HasForeignKey(d => d.ActivityProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderActi__Activ__607251E5");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderActivitiesDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderActi__Order__6166761E");
            });

            modelBuilder.Entity<OrderExtraServicesDetail>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ExtraServiceName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.ExtraService)
                    .WithMany(p => p.OrderExtraServicesDetails)
                    .HasForeignKey(d => d.ExtraServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderExtr__Extra__625A9A57");

                entity.HasOne(d => d.ExtraServiceProduct)
                    .WithMany(p => p.OrderExtraServicesDetails)
                    .HasForeignKey(d => d.ExtraServiceProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderExtr__Extra__634EBE90");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderExtraServicesDetails)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OrderExtr__Order__6442E2C9");
            });

            modelBuilder.Entity<OrderHandleStatus>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<PackageTour>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.HasOne(d => d.PackageCoupon)
                    .WithMany(p => p.PackageTours)
                    .HasForeignKey(d => d.PackageCouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PackageTo__Packa__70A8B9AE");

                entity.HasMany(d => d.Activities)
                    .WithMany(p => p.PackageTours)
                    .UsingEntity<Dictionary<string, object>>(
                        "PackageActivity",
                        l => l.HasOne<Activity>().WithMany().HasForeignKey("ActivityId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PackageAc__Activ__6AEFE058"),
                        r => r.HasOne<PackageTour>().WithMany().HasForeignKey("PackageTourId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PackageAc__Packa__6BE40491"),
                        j =>
                        {
                            j.HasKey("PackageTourId", "ActivityId").HasName("PK__PackageA__95FB0D540B6C04EE");

                            j.ToTable("PackageActivities");
                        });

                entity.HasMany(d => d.Attractions)
                    .WithMany(p => p.PackageTours)
                    .UsingEntity<Dictionary<string, object>>(
                        "PackageAttraction",
                        l => l.HasOne<Attraction>().WithMany().HasForeignKey("AttractionId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PackageAt__Attra__6CD828CA"),
                        r => r.HasOne<PackageTour>().WithMany().HasForeignKey("PackageTourId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PackageAt__Packa__6DCC4D03"),
                        j =>
                        {
                            j.HasKey("PackageTourId", "AttractionId").HasName("PK__PackageA__2C0A63F8A7B66135");

                            j.ToTable("PackageAttractions");
                        });

                entity.HasMany(d => d.ExtraServices)
                    .WithMany(p => p.PackageTours)
                    .UsingEntity<Dictionary<string, object>>(
                        "PackageExtraService",
                        l => l.HasOne<ExtraService>().WithMany().HasForeignKey("ExtraServiceId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PackageEx__Extra__6EC0713C"),
                        r => r.HasOne<PackageTour>().WithMany().HasForeignKey("PackageTourId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PackageEx__Packa__6FB49575"),
                        j =>
                        {
                            j.HasKey("PackageTourId", "ExtraServiceId").HasName("PK__PackageE__0943AA62245DBF88");

                            j.ToTable("PackageExtraServices");
                        });
            });

            modelBuilder.Entity<Partner>(entity =>
            {
                entity.HasIndex(e => e.Email, "UQ__Partners__A9D10534F0BA11DB")
                    .IsUnique();

                entity.Property(e => e.ConfirmCode).HasMaxLength(300);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EncryptedPassword).HasMaxLength(255);

                entity.Property(e => e.FaceBookAccessCode).HasMaxLength(300);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.GoogleAccessCode).HasMaxLength(300);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LineAccessCode).HasMaxLength(300);

                entity.Property(e => e.LoginTime).HasColumnType("datetime");
            });

            modelBuilder.Entity<PaymentMethod>(entity =>
            {
                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<PaymentStatus>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ReportReason>(entity =>
            {
                entity.Property(e => e.Reason).HasMaxLength(50);
            });

            modelBuilder.Entity<ReportedAttractionComment>(entity =>
            {
                entity.HasOne(d => d.CommentAttraction)
                    .WithMany(p => p.ReportedAttractionComments)
                    .HasForeignKey(d => d.CommentAttractionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ReportedA__Comme__7755B73D");

                entity.HasOne(d => d.ReportReason)
                    .WithMany(p => p.ReportedAttractionComments)
                    .HasForeignKey(d => d.ReportReasonId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ReportedA__Repor__7849DB76");
            });

            modelBuilder.Entity<Room>(entity =>
            {
                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Accommodation)
                    .WithMany(p => p.Rooms)
                    .HasForeignKey(d => d.AccommodationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rooms__Accommoda__7B264821");

                entity.HasOne(d => d.RoomType)
                    .WithMany(p => p.Rooms)
                    .HasForeignKey(d => d.RoomTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Rooms__RoomTypeI__7C1A6C5A");

                entity.HasMany(d => d.RoomServiceInfos)
                    .WithMany(p => p.Rooms)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoomServiceInfosRoom",
                        l => l.HasOne<RoomServiceInfo>().WithMany().HasForeignKey("RoomServiceInfoId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__RoomServi__RoomS__7EF6D905"),
                        r => r.HasOne<Room>().WithMany().HasForeignKey("RoomId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__RoomServi__RoomI__7E02B4CC"),
                        j =>
                        {
                            j.HasKey("RoomId", "RoomServiceInfoId").HasName("PK__RoomServ__B47A7613667669D4");

                            j.ToTable("RoomServiceInfos_Rooms");
                        });
            });

            modelBuilder.Entity<RoomImage>(entity =>
            {
                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.RoomImages)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoomImage__RoomI__793DFFAF");
            });

            modelBuilder.Entity<RoomProduct>(entity =>
            {
                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.NewPrice).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.Room)
                    .WithMany(p => p.RoomProducts)
                    .HasForeignKey(d => d.RoomId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoomProdu__RoomI__7A3223E8");
            });

            modelBuilder.Entity<RoomServiceInfo>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.ServiceInfoCategory)
                    .WithMany(p => p.RoomServiceInfos)
                    .HasForeignKey(d => d.ServiceInfoCategoryId)
                    .HasConstraintName("FK_RoomServiceInfos_ServiceInfoCategories");
            });

            modelBuilder.Entity<RoomType>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Schedule>(entity =>
            {
                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Schedules)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Schedules__Membe__7FEAFD3E");
            });

            modelBuilder.Entity<ServiceInfoCategory>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SystemImage>(entity =>
            {
                entity.Property(e => e.Image)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<SystemMessage>(entity =>
            {
                entity.Property(e => e.Content)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.SystemMessages)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SystemMes__Membe__00DF2177");
            });

            modelBuilder.Entity<Town>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Towns)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Towns__RegionId__03BB8E22");
            });

            modelBuilder.Entity<Transportation>(entity =>
            {
                entity.ToTable("Transportation");

                entity.Property(e => e.Arrival)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Departure)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Vehicle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.TravelPlan)
                    .WithMany(p => p.Transportations)
                    .HasForeignKey(d => d.TravelPlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Transport__Trave__04AFB25B");
            });

            modelBuilder.Entity<TravelPlan>(entity =>
            {
                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.TravelPlans)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TravelPla__Membe__05A3D694");

                entity.HasMany(d => d.ActivityProducts)
                    .WithMany(p => p.TravelPlans)
                    .UsingEntity<Dictionary<string, object>>(
                        "PlanActivity",
                        l => l.HasOne<ActivityProduct>().WithMany().HasForeignKey("ActivityProductId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PlanActiv__Activ__719CDDE7"),
                        r => r.HasOne<TravelPlan>().WithMany().HasForeignKey("TravelPlanId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PlanActiv__Trave__72910220"),
                        j =>
                        {
                            j.HasKey("TravelPlanId", "ActivityProductId").HasName("PK__PlanActi__EB02F9A024A38EAD");

                            j.ToTable("PlanActivities");
                        });

                entity.HasMany(d => d.Attractions)
                    .WithMany(p => p.TravelPlans)
                    .UsingEntity<Dictionary<string, object>>(
                        "PlanAttraction",
                        l => l.HasOne<Attraction>().WithMany().HasForeignKey("AttractionId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PlanAttra__Attra__73852659"),
                        r => r.HasOne<TravelPlan>().WithMany().HasForeignKey("TravelPlanId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PlanAttra__Trave__74794A92"),
                        j =>
                        {
                            j.HasKey("TravelPlanId", "AttractionId").HasName("PK__PlanAttr__99DDD1EE2BD7CB57");

                            j.ToTable("PlanAttractions");
                        });

                entity.HasMany(d => d.ExtraServiceProducts)
                    .WithMany(p => p.TravelPlans)
                    .UsingEntity<Dictionary<string, object>>(
                        "PlanExtraService",
                        l => l.HasOne<ExtraServiceProduct>().WithMany().HasForeignKey("ExtraServiceProductId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PlanExtra__Extra__756D6ECB"),
                        r => r.HasOne<TravelPlan>().WithMany().HasForeignKey("TravelPlanId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__PlanExtra__Trave__76619304"),
                        j =>
                        {
                            j.HasKey("TravelPlanId", "ExtraServiceProductId").HasName("PK__PlanExtr__4FFE2B6533EF175B");

                            j.ToTable("PlanExtraServices");
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}